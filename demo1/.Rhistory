{
# 分别使用回归模型补差数据集\随机森林补差数据集 进行建模
ind <- createDataPartition(switch(a,indian.lm$diabetes,indian.mf$diabetes),times = 1,p=0.8,list = F)
train <- indian.lm[ind,] # 构建训练集
test <- indian.lm[-ind,] # 构建测试集
prop.table(table(indian.lm$diabetes))
prop.table(table(train$diabetes))
prop.table(table(test$diabetes))
}
library(e1071)
ind <- createDataPartition(switch(a,indian.lm$diabetes,indian.mf$diabetes),times = 1,p=0.8,list = F)
train <- indian.lm[ind,] # 构建训练集
test <- indian.lm[-ind,] # 构建测试集
prop.table(table(indian.lm$diabetes))
prop.table(table(train$diabetes))
prop.table(table(test$diabetes))
{
# 分别使用回归模型补差数据集\随机森林补差数据集 进行建模
ind <- createDataPartition(switch(a,indian.lm$diabetes,indian.mf$diabetes),times = 1,p=0.8,list = F)
train <- indian.lm[ind,] # 构建训练集
test <- indian.lm[-ind,] # 构建测试集
prop.table(table(indian.lm$diabetes))
prop.table(table(train$diabetes))
prop.table(table(test$diabetes))
}
library(e1071)
str(indian.lm)
naiveBayes.model <- naiveBayes(diabetes~.,data = train) # 构建模型
train_predict <- predict(naiveBayes.model,newdata=train)
test_predict <- predict(naiveBayes.model,newdata=test)
tableTrain <- table(actual=train$diabetes,predict=train_predict)
tableTest <- table(actual=test$diabetes,predict=test_predict)
errTrain <-paste0(round((sum(tableTrain)-sum(diag(tableTrain)))*100/sum(tableTrain),2),"%")
errTrain <-paste0(round((sum(tableTrain)-sum(diag(tableTrain)))*100/sum(tableTrain),2),"%")
errTest <-paste0(round((sum(tableTest)-sum(diag(tableTest)))*100/sum(tableTest),2),"%")
library(C50)
library(e1071)
str(indian.lm)
naiveBayes.model <- naiveBayes(diabetes~.,data = train) # 构建模型
train_predict <- predict(naiveBayes.model,newdata=train)
test_predict <- predict(naiveBayes.model,newdata=test)
tableTrain <- table(actual=train$diabetes,predict=train_predict)
tableTest <- table(actual=test$diabetes,predict=test_predict)
for(a in 1:2)
{
# 分别使用回归模型补差数据集\随机森林补差数据集 进行建模
ind <- createDataPartition(switch(a,indian.lm$diabetes,indian.mf$diabetes),times = 1,p=0.8,list = F)
train <- indian.lm[ind,] # 构建训练集
test <- indian.lm[-ind,] # 构建测试集
prop.table(table(indian.lm$diabetes))
prop.table(table(train$diabetes))
prop.table(table(test$diabetes))
}
for(a in 1:2)
{
# 分别使用回归模型补差数据集\随机森林补差数据集 进行建模
ind <- createDataPartition(switch(a,indian.lm$diabetes,indian.mf$diabetes),times = 1,p=0.8,list = F)
train <- indian.lm[ind,] # 构建训练集
test <- indian.lm[-ind,] # 构建测试集
prop.table(table(indian.lm$diabetes))
prop.table(table(train$diabetes))
prop.table(table(test$diabetes))
# 使用naiveBayes函数建立朴素贝叶斯分类器
library(e1071)
str(indian.lm)
naiveBayes.model <- naiveBayes(diabetes~.,data = train) # 构建模型
# 预测结果
train_predict <- predict(naiveBayes.model,newdata=train)
test_predict <- predict(naiveBayes.model,newdata=test)
# 构建混淆矩阵
tableTrain <- table(actual=train$diabetes,predict=train_predict)
tableTest <- table(actual=test$diabetes,predict=test_predict)
# 计算误差率
errTrain <-paste0(round((sum(tableTrain)-sum(diag(tableTrain)))*100/sum(tableTrain),2),"%")
errTest <-paste0(round((sum(tableTest)-sum(diag(tableTest)))*100/sum(tableTest),2),"%")
# 决策树模型
library(C50)
C5.0.model <-C5.0(diabetes~.,data=train)
library(rpart)
rpart.model <-rpart(diabetes~.,data=train)
library(party)
ctree.model <- ctree(diabetes~.,data=train)
result[1,switch(a,2,4)] <-errTrain
result[1,switch(a,3,5)] <-errTest
for(i in 1:3){
# 预测结果
train_predict <-predict(switch(i,C5.0.model,rpart.model,ctree.model),newdata=train,type=switch(i,"class","class","response"))
test_predict <-predict(switch(i,C5.0.model,rpart.model,ctree.model),newdata=test,type=switch(i,"class","class","response"))
# 构建混淆矩阵
tableTrain <- table(actual=train$diabetes,predict=train_predict)
tableTest <- table(actual=test$diabetes,predict=test_predict)
# 计算误差率
result[i+1,switch(a,2,4)] <-paste0(round((sum(tableTrain)-sum(diag(tableTrain)))*100/sum(tableTrain),2),"%")
result[i+1,switch(a,3,5)]  <-paste0(round((sum(tableTest)-sum(diag(tableTest)))*100/sum(tableTest),2),"%")
}
result
# 使用随机森林建模
library(adabag)
bagging.model <- bagging(diabetes~.,data=train)
boosting.model <-boosting(diabetes~.,data=train)
library(randomForest)
randomForest.model <- randomForest(diabetes~.,data=train)
for(i in 1:3){
# 预测结果
train_predict <-predict(switch(i,bagging.model,boosting.model,randomForest.model),newdata = train)
test_predict <- predict(switch(i,bagging.model,boosting.model,randomForest.model),newdata = test)
# 构建混淆矩阵
tableTrain <- table(actual=train$diabetes,predict=switch(i,train_predict$class,train_predict$class,train_predict))
tableTest <- table(actual=test$diabetes,predict=switch(i,test_predict$class,test_predict$class,test_predict))
# 计算误差率
result[i+4,switch(a,2,4)] <-paste0(round((sum(tableTrain)-sum(diag(tableTrain)))*100/sum(tableTrain),2),"%")
result[i+4,switch(a,3,5)]  <-paste0(round((sum(tableTest)-sum(diag(tableTest)))*100/sum(tableTest),2),"%")
}
# 通过10折交叉验证选择最优参数
library(caret)
# 查看结果
rpart.model1
rf.model
nnet.model
# 利用rpart函数构建分类树
rpart.model1 <- rpart::rpart(diabetes~.,data = train,control = c(cp=switch(a,0.01741294, 0.02985075)))
# 利用randomForest函数构建随机森林
rf.model <-randomForest::randomForest(diabetes~.,data = train,mtry=switch(a,2,8))
# 利用nnet函数建立人工神经网络
nnet.model <- nnet::nnet(diabetes~.,data = train,size=switch(a,5,3),decay=0.1)
for(i in 1:3){
# 预测结果
train_predict <- predict(switch(i,rpart.model1,rf.model,nnet.model),newdata = train,type="class")
test_predict <- predict(switch(i,rpart.model1,rf.model,nnet.model),newdata = test,type="class")
# 构建混淆矩阵
tableTrain <- table(actual=train$diabetes,predict=train_predict)
tableTest <- table(actual=test$diabetes,predict=test_predict)
# 计算误差率
result.10[i,switch(a,2,4)] <-paste0(round((sum(tableTrain)-sum(diag(tableTrain)))*100/sum(tableTrain),2),"%")
result.10[i,switch(a,3,5)]  <-paste0(round((sum(tableTest)-sum(diag(tableTest)))*100/sum(tableTest),2),"%")
}
}
result
{
# 分别使用回归模型补差数据集\随机森林补差数据集 进行建模
ind <- createDataPartition(switch(a,indian.lm$diabetes,indian.mf$diabetes),times = 1,p=0.8,list = F)
train <- indian.lm[ind,] # 构建训练集
test <- indian.lm[-ind,] # 构建测试集
prop.table(table(indian.lm$diabetes))
prop.table(table(train$diabetes))
prop.table(table(test$diabetes))
}
library(C50)
install.packages("C50")
library(C50)
C5.0.model <-C5.0(diabetes~.,data=train)
library(rpart)
rpart.model <-rpart(diabetes~.,data=train)
library(party)
install.packages("party")
library(party)
ctree.model <- ctree(diabetes~.,data=train)
library(mvtnorm)
library(modeltools)
library(stats4)
library(strucchange)
library(zoo)
library(sandwich)
library(party)
ctree.model <- ctree(diabetes~.,data=train)
rpart.model.mf
rpart.model.lm
rf.model.mf
rf.model.lm
nnet.model.mf
nnet.model.lm
for(a in 1:2)
{
# ?ֱ?ʹ?ûع?ģ?Ͳ??????ݼ?\????ɭ?ֲ??????ݼ? ???н?ģ
ind <- createDataPartition(switch(a,indian.lm$diabetes,indian.mf$diabetes),times = 1,p=0.8,list = F)
train <- indian.lm[ind,] # ????ѵ��??
test <- indian.lm[-ind,] # ???????Լ?
prop.table(table(indian.lm$diabetes))
prop.table(table(train$diabetes))
prop.table(table(test$diabetes))
}
library(e1071)
str(indian.lm)
naiveBayes.model <- naiveBayes(diabetes~.,data = train) # 构建模型
train_predict <- predict(naiveBayes.model,newdata=train)
test_predict <- predict(naiveBayes.model,newdata=test)
tableTrain <- table(actual=train$diabetes,predict=train_predict)
tableTest <- table(actual=test$diabetes,predict=test_predict)
errTrain <-paste0(round((sum(tableTrain)-sum(diag(tableTrain)))*100/sum(tableTrain),2),"%")
errTest <-paste0(round((sum(tableTest)-sum(diag(tableTest)))*100/sum(tableTest),2),"%")
library(C50)
C5.0.model <-C5.0(diabetes~.,data=train)
library(rpart)
rpart.model <-rpart(diabetes~.,data=train)
library(party)
ctree.model <- ctree(diabetes~.,data=train)
result[1,switch(a,2,4)] <-errTrain
result[1,switch(a,3,5)] <-errTest
train_predict <-predict(switch(i,C5.0.model,rpart.model,ctree.model),newdata=train,type=switch(i,"class","class","response"))
tableTrain <- table(actual=train$diabetes,predict=train_predict)
tableTest <- table(actual=test$diabetes,predict=test_predict)
result[i+1,switch(a,2,4)] <-paste0(round((sum(tableTrain)-sum(diag(tableTrain)))*100/sum(tableTrain),2),"%")
result[i+1,switch(a,2,4)] <-paste0(round((sum(tableTrain)-sum(diag(tableTrain)))*100/sum(tableTrain),2),"%")
result[i+1,switch(a,3,5)]  <-paste0(round((sum(tableTest)-sum(diag(tableTest)))*100/sum(tableTest),2),"%")
for(i in 1:3){
# 预测结果
train_predict <-predict(switch(i,C5.0.model,rpart.model,ctree.model),newdata=train,type=switch(i,"class","class","response"))
test_predict <-predict(switch(i,C5.0.model,rpart.model,ctree.model),newdata=test,type=switch(i,"class","class","response"))
# 构建混淆矩阵
tableTrain <- table(actual=train$diabetes,predict=train_predict)
tableTest <- table(actual=test$diabetes,predict=test_predict)
# 计算误差率
result[i+1,switch(a,2,4)] <-paste0(round((sum(tableTrain)-sum(diag(tableTrain)))*100/sum(tableTrain),2),"%")
result[i+1,switch(a,3,5)]  <-paste0(round((sum(tableTest)-sum(diag(tableTest)))*100/sum(tableTest),2),"%")
}
result
library(adabag)
bagging.model <- bagging(diabetes~.,data=train)
boosting.model <-boosting(diabetes~.,data=train)
bagging.model <- bagging(diabetes~.,data=train)
boosting.model <-boosting(diabetes~.,data=train)
library(randomForest)
randomForest.model <- randomForest(diabetes~.,data=train)
for(i in 1:3){
# 预测结果
train_predict <-predict(switch(i,bagging.model,boosting.model,randomForest.model),newdata = train)
test_predict <- predict(switch(i,bagging.model,boosting.model,randomForest.model),newdata = test)
# 构建混淆矩阵
tableTrain <- table(actual=train$diabetes,predict=switch(i,train_predict$class,train_predict$class,train_predict))
tableTest <- table(actual=test$diabetes,predict=switch(i,test_predict$class,test_predict$class,test_predict))
# 计算误差率
result[i+4,switch(a,2,4)] <-paste0(round((sum(tableTrain)-sum(diag(tableTrain)))*100/sum(tableTrain),2),"%")
result[i+4,switch(a,3,5)]  <-paste0(round((sum(tableTest)-sum(diag(tableTest)))*100/sum(tableTest),2),"%")
}
library(caret)
rpart.model1
rf.model
nnet.model
rpart.model1 <- rpart::rpart(diabetes~.,data = train,control = c(cp=switch(a,0.01741294, 0.02985075)))
rf.model <-randomForest::randomForest(diabetes~.,data = train,mtry=switch(a,2,8))
nnet.model <- nnet::nnet(diabetes~.,data = train,size=switch(a,5,3),decay=0.1)
for(i in 1:3){
# 预测结果
train_predict <- predict(switch(i,rpart.model1,rf.model,nnet.model),newdata = train,type="class")
test_predict <- predict(switch(i,rpart.model1,rf.model,nnet.model),newdata = test,type="class")
# 构建混淆矩阵
tableTrain <- table(actual=train$diabetes,predict=train_predict)
tableTest <- table(actual=test$diabetes,predict=test_predict)
# 计算误差率
result.10[i,switch(a,2,4)] <-paste0(round((sum(tableTrain)-sum(diag(tableTrain)))*100/sum(tableTrain),2),"%")
result.10[i,switch(a,3,5)]  <-paste0(round((sum(tableTest)-sum(diag(tableTest)))*100/sum(tableTest),2),"%")
}
}
result
library(shiny); runApp('D:/work/R-Shiny/Rshiny.R')
install.packages("shiny")
install.packages("magick")
install.packages("magick")
install.packages("magick")
install.packages("magick")
install.packages("magick")
library(magick)
install.packages("Rcpp")
library(magick)
str(magick::magic_config())
library(magick)
str(magick::magic_config())
library(magick)
str(magick::magic_config())
tiger <- image_read('http://jeroen.github.io/images/tiger.svg')
install.packages("curl")
tiger <- image_read('http://jeroen.github.io/images/tiger.svg')
tiger <- image_read('http://jeroen.github.io/images/tiger.svg')
str(magick::magic_config())
r <- image_read("D:/Rlogo.png")
str(magick::magic_config())
library(magick)
r <- image_read("D:/Rlogo.png")
library(magick)
str(magick::magic_config())
r <- image_read("D:/Rlogo.png")
tiger <- image_read('http://jeroen.github.io/images/tiger.svg')
library(curl)
library(curl)
install.packages("curl")
library(curl)
str(magick::magic_config())
r <- image_read("D:/Rlogo.png")
tiger <- image_read('http://jeroen.github.io/images/tiger.svg')
r <- image_read("D:/Rlogo.png")
tiger <- image_read('http://jeroen.github.io/images/tiger.svg')
image_info(tiger)
image_write(tiger, path="tiger.png", format="png")
celtics <- read_image("D:/Rlogo.png")
print(celtics)
celtics <- image_read("D:/Rlogo.png")
print(celtics)
image_border(celtics,"green","20x10")
image_crop(celtics,"100x150+5")
image_scale（celtics,"200"）
image_scale(celtics,"200"）
image_scale(celtics,"200")
image_flop(celtics)
image_backgroud(celtics,"pink",flattern=TRUE)
image_backgroud(celtics,"pink",flattern=TRUE)
image_background(celtics,"pink",flattern=TRUE)
image_background(celtics,"pink",flatten=TRUE)
image_blur(celtics,10,5)
image_annotate(celtics, "Beat LA!", size=35, gravity="southwest", color="green")
library(magrittr)
image_read("D:/Rlogo.png")%>%  image_rotate(270)%>%  image_background("pink", flatten=TRUE)%>%  image_border("green", "10x10")%>%  image_annotate("Beat LA!", color="black", size=30)
earth<-image_read("https://jeroen.github.io/images/earth.gif")
earth<-image_scale(earth, "200")
length(earth)
print(earth)
bigdata<-image_read('https://jeroen.github.io/images/bigdata.jpg')
frink<-image_read("https://jeroen.github.io/images/frink.png")
logo<-image_read("https://www.r-project.org/logo/Rlogo.png")
img<-c(bigdata, logo, frink)
img<-image_scale(img, "300x300")
image_info(img)
image_mosaic(img)
left_to_right<-image_append(image_scale(img, "x200"))
image_background(left_to_right, "white", flatten=TRUE)
manual<-image_read('https://cran.r-project.org/web/packages/magick/magick.pdf', density="72x72")
manual<-image_read('https://cran.r-project.org/web/packages/magick/magick.pdf', density="72x72")
image_info(manual)
image_convert(manual[1], "png", 8)
manual<-image_read('https://cran.r-project.org/web/packages/magick/magick.pdf')
manual<-image_read('https://cran.r-project.org/web/packages/policies.pdf', density="72x72")
manual<-image_read('https://cran.r-project.org/web/packages/policies.pdf', density="72x72", depth="16x16")
library(pdftools)
install.packages("pdftools")
library(pdftools)
bitmap<-pdf_render_page('https://cran.r-project.org/web/packages/magick/magick.pdf',  page=1, dpi=72, numeric=FALSE)
image_read(bitmap)
manual<-image_read('https://cran.r-project.org/web/packages/magick/magick.pdf', density="72x72", depth="16x16")
image_info(manual)
image_convert(manual[1], "png", 8)
image_animate(image_scale(img, "200x200"), fps=1, dispose="previous")
newlogo<-image_scale(image_read("https://www.r-project.org/logo/Rlogo.png"), "x150")
oldlogo<-image_scale(image_read("https://developer.r-project.org/Logo/Rlogo-3.png"), "x150")
frames<-image_morph(c(oldlogo, newlogo), frames=10)
image_animate(frames)
str(magick::magic_config())
str(magick::magic_config())
library(missForest)
library(randomForest)
library(foreach)
library(iterators)
library(itertools)
library(missForest)
indian <- as.numeric(indian)
z=missForest(indian)
indian.mf=z$ximp
library(foreign)
indian <- as.numeric(indian)
indian <- as.numeric(unlist(indian))
z=missForest(indian)
library(foreign)
in <- as.numeric(unlist(indian))
z=missForest(in)
in1 <- as.numeric(unlist(indian))
z=missForest(in1)
z=missForest(indian)
read.table(file = "D:/PimaIndiansDiabetes2.csv", header=FALSE, na.strings=".")
install.packages("jiebaR")
library(jiebaR)
install.packages("jiebaRD")
library(jiebaR)
library(jiebaRD)
library(jiebaR)
wk = worker()
wk["天青色等烟雨，而我在等你"]
library(jiebaRD)
wk["亲爱的爱上你从那天起甜蜜的很轻易"]
segment( "故事的小黄花，从出生那天就飘着" , wk)
library(wordcloud2)
jc<-scan("C:/Topic/txt/zjl.txt",sep="\n",what="",encoding="UTF-8")
head(jc)
library(jiebaRD)
library(jiebaR)
wk = worker()
wk["天青色等烟雨，而我在等你"]
segment( "故事的小黄花，从出生那天就飘着" , wk)
library(wordcloud2)
jc<-scan("C:/Topic/txt/zjl.txt",sep="\n",what="",encoding="UTF-8")
head(jc)
mixseg<-worker()
segment(head(jc),mixseg)
head(jc)
mixseg<-worker()
segment(head(jc),mixseg)
library(wordcloud2)
jc<-scan("C:/Topic/txt/zjl.txt",sep="\n",what="",encoding="UTF-8")
head(jc)
mixseg<-worker()
segment(head(jc),mixseg)
library(wordcloud2)
library(wordcloud2)
jc<-scan("C:/Topic/txt/zjl.txt",sep="\n",what="",encoding="UTF-8")
head(jc)
mixseg<-worker()
segment(head(jc),mixseg)
wk = worker()
wk["天青色等烟雨，而我在等你"]
segment( "故事的小黄花，从出生那天就飘着" , wk)
library(wordcloud2)
jc<-scan("C:/Topic/txt/zjl.txt",sep="\n",what="",encoding="UTF-8")
head(jc)
mixseg<-worker()
segment(head(jc),mixseg)
jc2<-segment(jc,mixseg)
library(wordcloud2)
jc<-scan("C:/Topic/txt/zjl.txt",sep="\n",what="",encoding="UTF-8")
library(wordcloud2)
jc<-scan("C:/Topic/txt/zjl.txt",sep="\n",what="",encoding="UTF-8")
head(jc)
mixseg<-worker()
segment(head(jc),mixseg)
jc2<-segment(jc,mixseg)
length(jc2)
sort(table(jc2),decreasing=T)[1:50]
jc3<-jc2[nchar(jc2)>1 & nchar(jc2)<7]
sort(table(jc3),decreasing=T)[1:50]
jc4<-jc2[nchar(jc2)>2 & nchar(jc2)<8]
sort(table(jc4),decreasing=T)[1:50]
wordFreq100=sort(table(jc4),decreasing=T)[1:100]
wordFreq100
wordcloud2(wordFreq100, size = 1,shape = 'pentagon')
table(jc3)["春天"]
table(jc3)["夏天"]
table(jc3)["夏天"]
table(jc3)["秋天"]
table(jc3)["冬天"]
wordcloud2(wordFreq100, size = 1,shape = 'star')
wordcloud2(wordFreq100, size = 1, fontFamily = "微软雅黑",shape = 'star')
wordcloud2(wordFreq100, size = 1, fontFamily = "微软雅黑",shape = 'diamond')
wordcloud2(wordFreq100, size = 1, fontFamily = "微软雅黑",shape = 'cardioid')
wordcloud2(wordFreq100, size = 1, fontFamily = "微软雅黑",shape = 'pentagon')
wordcloud2(wordFreq100, size = 0.3, fontFamily = "微软雅黑",shape = 'star')
indian <- as.numeric(unlist(indian))
z=missForest(indian)
library(missForest)
library(wordcloud2)
jc<-scan("C:/Topic/txt/pyq.txt",sep="\n",what="",encoding="UTF-8")
head(jc)
mixseg<-worker()
segment(head(jc),mixseg)
jc2<-segment(jc,mixseg)
length(jc2)
sort(table(jc2),decreasing=T)[1:50]
jc3<-jc2[nchar(jc2)>1 & nchar(jc2)<7]
sort(table(jc3),decreasing=T)[1:50]
jc4<-jc2[nchar(jc2)>2 & nchar(jc2)<8]
sort(table(jc4),decreasing=T)[1:50]
wordFreq100=sort(table(jc4),decreasing=T)[1:100]
wordFreq100
wordcloud2(wordFreq100, size = 0.3, fontFamily = "微软雅黑",shape = 'star')
wordcloud2(wordFreq100, size = 0.3, fontFamily = "微软雅黑",shape = 'star')
wordFreq100=sort(table(jc4),decreasing=T)[1:100]
wordFreq100
wordcloud2(wordFreq100, size = 1, fontFamily = "微软雅黑",shape = 'star')
wordcloud2(wordFreq100, size = 1, shape = 'star')
library(jiebaRD)
library(jiebaR)
library(wordcloud2)
jc<-scan("C:/Topic/txt/pyq.txt",sep="\n",what="",encoding="UTF-8")
head(jc)
mixseg<-worker()
segment(head(jc),mixseg)
jc2<-segment(jc,mixseg)
length(jc2)
sort(table(jc2),decreasing=T)[1:50]
jc3<-jc2[nchar(jc2)>1 & nchar(jc2)<7]
sort(table(jc3),decreasing=T)[1:50]
jc4<-jc2[nchar(jc2)>2 & nchar(jc2)<8]
sort(table(jc4),decreasing=T)[1:50]
wordFreq100=sort(table(jc4),decreasing=T)[1:100]
wordFreq100
wordcloud2(wordFreq100, size = 1, shape = 'star')
library(jiebaRD)
library(jiebaR)
library(wordcloud2)
jc<-scan("C:/Topic/txt/pyq.txt",sep="\n",what="",encoding="UTF-8")
head(jc)
mixseg<-worker()
segment(head(jc),mixseg)
jc2<-segment(jc,mixseg)
length(jc2)
sort(table(jc2),decreasing=T)[1:50]
jc3<-jc2[nchar(jc2)>1 & nchar(jc2)<7]
sort(table(jc3),decreasing=T)[1:50]
jc4<-jc2[nchar(jc2)>2 & nchar(jc2)<8]
sort(table(jc4),decreasing=T)[1:50]
wordFreq100=sort(table(jc4),decreasing=T)[1:100]
wordFreq100
wordcloud2(wordFreq100, size = 1, shape = 'star')
wordcloud2(wordFreq100, size = 1, fontfamily='微软雅黑',shape = 'star')
wordcloud2(wordFreq100, size = 1, fontFamily='微软雅黑',shape = 'star')
wordFreq100=sort(table(jc3),decreasing=T)[1:100]
wordFreq100
wordcloud2(wordFreq100, size = 1, fontFamily='微软雅黑',shape = 'star')
library(shiny); runApp('D:/work/R-Shiny/Rshiny.R')
runApp('D:/work/R-Shiny/Rshiny.R')
runApp('D:/work/R-Shiny/Rshiny.R')
library(shiny)
runApp('C:/work/dash/demo1')
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
